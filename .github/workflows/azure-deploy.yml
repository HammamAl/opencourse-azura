name: Deploy E-Learning App to Azure

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
    types: [closed]

env:
  AZURE_WEBAPP_NAME: hammamal-elearning-app-prod
  NODE_VERSION: "20.x" # Changed from 22.16.0 for better compatibility
  AZURE_WEBAPP_PACKAGE_PATH: "."

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production
          # Add placeholder values for build-time environment variables
          AZURE_STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=https;AccountName=placeholder;AccountKey=placeholder;EndpointSuffix=core.windows.net"
          DATABASE_URL: "postgresql://user:password@localhost:5432/database"
          NEXTAUTH_SECRET: "placeholder-secret-key"
          NEXTAUTH_URL: "https://placeholder.com"
          SENDGRID_API_KEY: "placeholder"
          NEXT_PUBLIC_AZURE_IMAGE_URL: "https://placeholder.blob.core.windows.net"

      - name: Remove dev dependencies
        run: npm prune --production

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          # Copy necessary files for production
          cp -r .next deployment/
          cp -r public deployment/
          cp -r node_modules deployment/
          cp package.json deployment/
          cp next.config.ts deployment/
          cp -r prisma deployment/
          cp -r generated deployment/ || true
          cp -r lib deployment/

          # Create server.js for Azure App Service
          cat > deployment/server.js << 'EOF'
          const { createServer } = require('http');
          const { parse } = require('url');
          const next = require('next');

          const dev = process.env.NODE_ENV !== 'production';
          const hostname = process.env.HOSTNAME || 'localhost';
          const port = process.env.PORT || 3000;

          const app = next({ dev, hostname, port });
          const handle = app.getRequestHandler();

          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true);
                await handle(req, res, parsedUrl);
              } catch (err) {
                console.error('Error occurred handling', req.url, err);
                res.statusCode = 500;
                res.end('Internal server error');
              }
            }).listen(port, (err) => {
              if (err) throw err;
              console.log(`> Ready on http://${hostname}:${port}`);
            });
          });
          EOF

          # Create web.config for Azure
          cat > deployment/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <webSocket enabled="false" />
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <httpErrors existingResponse="PassThrough" />
              <iisnode watchedFiles="web.config;*.js" />
            </system.webServer>
          </configuration>
          EOF

      - name: "Stop Azure Web App (to prevent conflicts)"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az webapp stop --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group $(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --query resourceGroup -o tsv) || echo "Failed to stop app, continuing..."
        continue-on-error: true

      - name: "Wait for app to stop"
        run: sleep 30

      - name: "Deploy to Azure Web App (with retry)"
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./deployment
          clean: true
          restart: true
        timeout-minutes: 10
        continue-on-error: true
        id: deploy_attempt_1

      - name: "Retry deployment if first attempt failed"
        if: steps.deploy_attempt_1.outcome == 'failure'
        run: |
          echo "First deployment attempt failed, waiting 60 seconds before retry..."
          sleep 60

      - name: "Deploy to Azure Web App (Retry Attempt)"
        if: steps.deploy_attempt_1.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./deployment
          clean: true
          restart: true
        timeout-minutes: 10

      - name: "Start Azure Web App"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az webapp start --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group $(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --query resourceGroup -o tsv) || echo "Failed to start app, it may start automatically"
        continue-on-error: true

      - name: "Post-deployment health check"
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60
          echo "Checking deployment health..."
          for i in {1..5}; do
            if curl -f -s --max-time 30 https://hammamal-elearning-app-prod-fvdua8defrgnece3.indonesiacentral-01.azurewebsites.net/; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: "Deployment Summary"
        run: |
          echo "üöÄ Deployment completed!"
          echo "üìÖ Deployed at: $(date)"
          echo "üåê App URL: https://hammamal-elearning-app-prod-fvdua8defrgnece3.indonesiacentral-01.azurewebsites.net"
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "üìù Commit: ${{ github.sha }}"
